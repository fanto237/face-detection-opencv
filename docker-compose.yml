version: "3.9"

services:

  # order api docker container
  orderapi:
    build:
      context: ./src/backend/
      dockerfile: Dockerfile-OrderApi
    container_name: orderapi
    hostname: orderapi
    ports:
    - "5000:80"
    - "5001:443"
    volumes:
      - ./ssl:/https:ro
    environment:
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=f@nto237
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/certificat.pfx
   restart: on-failure
    depends_on:
    - rabbitmq
    - database

  # face detection service docker container
  face-detection:
    build: 
      context: ./src/backend/
      dockerfile: Dockerfile-Compute
    container_name: face-detection
    hostname: face-detection
    restart: on-failure
    depends_on:
      - rabbitmq
      - database

  # notification service docker container
  notification-service:
    build:
      context: ./src/backend/
      dockerfile: Dockerfile-Notif
    container_name: notification-service
    hostname: notification-service
    ports:
      - "587:587"
    restart: on-failure
    depends_on:
      - rabbitmq
      - database

  #rabbitmq container service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
    - "15672:15672"
    - "5672:5672"

  
  # sql server container service
  database:
    image: postgres:15-alpine
    container_name: postgres-server
    hostname: postgres
    ports:
    - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes: 
    - "../database:/var/lib/postgresql/data"
    restart: always

# database management tool
  adminer:
    image: adminer
    hostname: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"



