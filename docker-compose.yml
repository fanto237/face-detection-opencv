version: "3.9"

services:

  # order api docker container
  orderapi:
    image: fanto/orderapi:1.3.1
    ports:
      - "8182:80"
    restart: on-failure
    depends_on:
    - rabbitmq
    - database
    networks:
      - backend

#   # face detection service docker container
#   face-detection:
#     build: 
#       context: ./src/backend/
#       dockerfile: Dockerfile-Compute
#     container_name: face-detection
#     hostname: face-detection
#     restart: on-failure
#     depends_on:
#       - rabbitmq
#       - database

#   # notification service docker container
#   notification-service:
#     build:
#       context: ./src/backend/
#       dockerfile: Dockerfile-Notif
#     container_name: notification-service
#     hostname: notification-service
#     ports:
#       - "587:587"
#     restart: on-failure
#     depends_on:
#       - rabbitmq
#       - database

#--------------------------

  #rabbitmq container service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
    - "15672:15672"
    - "5672:5672"
    networks:
      - backend

  
  # sql server container service
  postgres:
    image: postgres:15-alpine
    ports:
    - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes: 
    - "../database:/var/lib/postgresql/data"
    restart: unless-stopped
    networks:
      - backend

# database management tool
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - backend

networks:
  backend:
    driver: bridge



